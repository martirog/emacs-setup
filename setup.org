use "C-c '" to edit code blocks
tna with C-c C-v t

* setup colors
** < 28
*** frame background

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "28")
    (set-face-background 'default "black"))
#+END_SRC

*** normal text

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "28")
    (set-face-foreground 'default "bisque"))
#+END_SRC

*** cursor color

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "28")
    (set-cursor-color "bisque")) ; did not need this before 23.1?
#+END_SRC

*** higlights

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "28")
    (set-face-background 'highlight "blue")
    (set-face-foreground 'highlight "yellow")
    (set-face-background 'isearch "yellow")
    (set-face-foreground 'isearch "red"))
#+END_SRC

*** xpointer

#+BEGIN_SRC emacs-lisp
  (when (version< emacs-version "28")
    (setq x-pointer-foreground-color "black")        ; Adds to bg color,
                                                     ; so keep black
    (setq x-pointer-background-color "blue"))        ; This is color you really
                                                     ; want ptr/crsr
#+END_SRC
*** TODO : check this one out

*** window devider

   Remove window deviders. Not sure this is something I want?

#+BEGIN_SRC emacs-lisp
  (when (version< "25" emacs-version)
    (window-divider-mode)
    (set-face-foreground 'window-divider "white")
    (set-face-foreground 'window-divider-first-pixel "black")
    (set-face-foreground 'window-divider-last-pixel "black")
    (set-face-attribute 'fringe nil
                        :foreground (face-foreground 'default)
                        :background "black")
    (setq window-divider-default-right-width 1))
#+END_SRC

** >= 28
*** load theme
using the alternate syntax here as these yeld a warmer
color palet. not that faund of pastell. And the yellow comments
to better seperate comments and code
#+BEGIN_SRC emacs-lisp
  (when (version< "28.1" emacs-version)
    (setq modus-themes-syntax '(yellow-comments alt-syntax))
    (load-theme 'modus-vivendi))
#+END_SRC


* emacs general settings
** buffer name in titel bar

#+BEGIN_SRC emacs-lisp
  ;; Format the title-bar to always include the buffer name
  (setq frame-title-format "emacs - %b")
#+END_SRC

** remove startup screens

#+BEGIN_SRC emacs-lisp
  ;; disable welcome message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
  (setq initial-scratch-message nil)
#+END_SRC

** remove tool/menu/scroll bar

#+BEGIN_SRC emacs-lisp
  ;;remove toolbar
  (tool-bar-mode -1)
  (menu-bar-mode -1)   ; turn off menu bar, not sure you want this?
  (scroll-bar-mode -1) ;
#+END_SRC

** whitespace setup

#+BEGIN_SRC emacs-lisp
  ;;show trailing whitespaces
  (setq-default show-trailing-whitespace t)
  ; Indicate empty lines at the end of the buffer
  (setq-default indicate-empty-lines t)
#+END_SRC

** dont wrap lines

#+BEGIN_SRC emacs-lisp
  ; turn truncation on
  (setq-default truncate-lines t)
#+END_SRC

** enable window moving with shift-arrow

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC

** move all backup
s to same folder

#+BEGIN_SRC emacs-lisp
  (let ((backup-path (concat user-emacs-directory "/backup")))
    (setq lock-file-name-transforms
	  (list (list "\\`/.*/\\([^/]+\\)\\'" backup-path t)))
    (setq auto-save-file-name-transforms
	  (list (list "\\`/.*/\\([^/]+\\)\\'" backup-path t)))
    (setq backup-directory-alist
	  (list (cons ".*" backup-path))))
#+END_SRC

** dont ring the bell
   turn off sound for example at wrapping search
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* mode line
** default colors

#+BEGIN_SRC emacs-lisp
  (set-face-background 'mode-line "#404040")
  (set-face-foreground  'mode-line "#FDCE81")
  (set-face-background 'mode-line-inactive "#202020")
  (set-face-foreground  'mode-line-inactive "#f0f0f0")
#+END_SRC

** layout with costum colors

#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                (list
                 "%e"
                 'mode-line-front-space
                 '(:propertize mode-line-mule-info face (:foreground "green"))
                 '(:propertize mode-line-client   face (:foreground "green"))
                 '(:propertize mode-line-modified face (:foreground "green"))
                 '(:propertize mode-line-remote   face (:foreground "green"))
                 '(:propertize mode-line-frame-identification face (:foreground "#CF70F7"))
                 'mode-line-buffer-identification
                 "   "
                 '(:propertize mode-line-position face (:foreground "#2EB604"))
                 '(vc-mode vc-mode)
                 "  "
                 '(:propertize mode-line-modes face (:foreground "#CF70F7"))
                 '(:propertize mode-line-misc-info face (:foreground "#CC92E0"))
                 'mode-line-end-spaces
                 ))
#+END_SRC

* global key mods
** grep find

#+BEGIN_SRC emacs-lisp
  (global-set-key (quote [?\C-c ?f]) (quote grep-find) )
  ; move to the grep buffer after run
  (add-hook 'grep-mode-hook
            '(lambda ()
               (switch-to-buffer-other-window "*grep*")))
#+END_SRC

** open file at point

#+BEGIN_SRC emacs-lisp
  (global-set-key (quote [?\C-c ?o]) (quote find-file-at-point) )
#+END_SRC

** show occurenses in search

#+BEGIN_SRC emacs-lisp
  ;; Activate occur easily inside isearch
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+END_SRC

** quick calkulator

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c +") 'quick-calc)
#+END_SRC

** org capture

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

* etags-wrapper
#+BEGIN_SRC emacs-lisp
    (when (file-directory-p "~/.emacs.d/modes/etags-wrapper")
      (add-to-list 'load-path "~/.emacs.d/modes/etags-wrapper")
      (require 'etags-wrapper))
#+END_SRC

* project-wrapper
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/modes/project-wrapper/")
    (add-to-list 'load-path "~/.emacs.d/modes/project-wrapper/")
    (require 'project-wrapper))

#+END_SRC

* ido-compleating-read-in-buffer

  this is used by verilog minor mode so it needs to be set before that
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/modes/ido-compleating-read-in-buffer")
    (load "~/.emacs.d/modes/ido-compleating-read-in-buffer/ido-compleation-read-in-buffer.el"))
#+END_SRC
* cc-mode

#+BEGIN_SRC emacs-lisp
  ;; set c-mode-hook function to override default behavior of various items

  (setq tab-width 4);; vc++ default
  (setq-default c-basic-offset 4) ;; 2 is default
  (setq-default indent-tabs-mode nil);; indent with spaces
  (c-set-offset 'case-label '+)
  (c-set-offset 'inline-open '0)
  (c-set-offset 'arglist-close '0)

  (require 'cc-mode)

  (defconst my-ttc-style '((c-basic-offset . 4)
                           (c-comment-only-line-offset 0 . 0)
                       (c-offsets-alist
                            (statement-block-intro . +)
                      (knr-argdecl-intro . 5)
                      (substatement-open . 0)
                      (label . 0)
                      (statement-case-open . +)
                            (statement-case-intro . +)
                      (statement-cont . +)
                      (arglist-intro . c-lineup-arglist-intro-after-paren)
                      (arglist-close . c-lineup-arglist)
                      (inline-open . 0))
                           (c-special-indent-hook . c-gnu-impose-minimum)
                           (c-comment-continuation-stars . "")
                           (c-hanging-comment-ender-p . t)))

  (defun my-c-mode-common-hook ()

    ;; my customizations for all of c-mode and related modes
    (c-set-offset 'substatement-open 0)
    (c-set-style "ttc")

    ;; other customizations can go here
    )

  (c-add-style "ttc" my-ttc-style )

  (add-hook 'c-mode-hook 'my-c-mode-common-hook)
  (add-hook 'c-mode-hook 'font-lock-mode)
#+END_SRC

** c minor mode
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/modes/cminor-mode")
    (add-to-list 'load-path "~/.emacs.d/modes/cminor-mode")
    (require 'cminor-mode)
    (add-hook 'c-mode-hook 'cminor-mode)
    (add-hook 'c++-mode-hook 'cminor-mode))
#+END_SRC

* toggle between horizontal and vertical window split

#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  (global-set-key (quote [?\C-c ?t]) (quote toggle-window-split) )
#+END_SRC

* verilog
** load verilog mode

#+BEGIN_SRC emacs-lisp
  (require 'verilog-mode)
  ;; Load verilog mode only when needed
  (autoload 'verilog-mode "verilog-mode" "Verilog mode" t )
  ;; Any files that end in .v, .dv or .sv should be in verilog mode
  (add-to-list 'auto-mode-alist '("\\.[ds]?v\\'" . verilog-mode))
  ;; Any files in verilog mode should have their keywords colorized
  (add-hook 'verilog-mode-hook '(lambda () (font-lock-mode 1)))
#+END_SRC

** indent setup

#+BEGIN_SRC emacs-lisp
  ;; Set indent
  ;;(setq verilog-indent-level 2)
  (defvar gc/verilog-indent-level 2)
  (setq verilog-indent-level gc/verilog-indent-level
        verilog-indent-level-module gc/verilog-indent-level
        verilog-indent-level-declaration gc/verilog-indent-level
        verilog-indent-level-behavioral gc/verilog-indent-level
        verilog-indent-level-directive gc/verilog-indent-level
        verilog-case-indent gc/verilog-indent-level
        verilog-cexp-indent gc/verilog-indent-level)
#+END_SRC

** defaults

#+BEGIN_SRC emacs-lisp

  (setq verilog-align-ifelse t
        verilog-auto-endcomments t
        verilog-auto-indent-on-newline t
        verilog-auto-lineup nil
        verilog-auto-newline nil
        verilog-date-scientific-format t
        verilog-indent-begin-after-if t
        verilog-highlight-grouping-keywords t
        verilog-highlight-modules t
        verilog-minimum-comment-distance 20
        verilog-tab-always-indent t
        verilog-tab-to-comment nil)
#+END_SRC

** verilog minor mode
   This is written by me so tread lightly

#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/modes/verilog-minor-mode")
    (add-to-list 'load-path "~/.emacs.d/modes/verilog-minor-mode")
    ;(autoload 'verilog-minor-mode "verilog-minor-mode" "Verilog minor mode" t )
    (require 'verilog-minor-mode)
    ; add the paths to your repos here
    ;(add-to-list 'vminor-path-to-repos '("/home/martin/github/uvm" . nil))
    (add-hook 'verilog-mode-hook 'verilog-minor-mode))
#+END_SRC

** uvm log mode
   this is another one of my own half baked modes so this is danger danger

#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/modes/uvm-log-mode")
    (add-to-list 'load-path "~/.emacs.d/modes/uvm-log-mode")
    ;(autoload 'verilog-minor-mode "verilog-minor-mode" "Verilog minor mode" t )
    (require 'uvm-log-mode)
    ; add the paths to your repos here
    ;(add-to-list 'vminor-path-to-repos '("/home/martin/github/uvm" . nil))
    (add-to-list 'auto-mode-alist '("\\transcript\\'" . uvm-log-mode)))
#+END_SRC

* ido

#+BEGIN_SRC emacs-lisp
  (require 'ido)
  (ido-mode t)
  (setq ido-enable-flex-matching t) ;; enable fuzzy matching
  (setq ido-everywhere t)
#+END_SRC

** try to guess context when opening file at point
   This is quite helpfull at times but right now its a little to active
   I think I cud get used to it, but turning it off for now
#+BEGIN_SRC emacs-lisp :tangle no
  (setq ido-use-filename-at-point 'guess)
#+END_SRC

** Dont look for files in other than the present directory

#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-work-directories-length -1)
#+END_SRC

** vertically show compleation optuins DISABLED

#+BEGIN_SRC emacs-lisp :tangle no
   ;; Display ido results vertically, rather than horizontally
  (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
#+END_SRC

* erc

#+BEGIN_SRC emacs-lisp
  (defun rgr/ido-erc-buffer()
    (interactive)
    (switch-to-buffer
     (ido-completing-read "Channel:"
                          (save-excursion
                            (delq
                             nil
                             (mapcar (lambda (buf)
                                       (when (buffer-live-p buf)
                                         (with-current-buffer buf
                                           (and (eq major-mode 'erc-mode)
                                                (buffer-name buf)))))
                                     (buffer-list)))))))

    (global-set-key (kbd "C-c e") 'rgr/ido-erc-buffer)
#+END_SRC

* groovy

#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/mode")
      (add-to-list 'load-path "~/.emacs.d/mode")
      (when (file-exists-p "~/.emacs.d/mode/groovy-mode.el")
        (load "groovy-mode.el")
        (require 'groovy-mode)
        (add-to-list 'auto-mode-alist '("\\.groovy\\'" . groovy-mode))
        (add-to-list 'auto-mode-alist '("\\Jenkinsfile\\'" . groovy-mode))
        )
      )
#+END_SRC

* fucking mac shit

#+BEGIN_SRC emacs-lisp
  (setq x-super-keysym 'meta)
#+END_SRC

* emacs server

#+BEGIN_SRC emacs-lisp
  (setq server-name
        (if (getenv "VIRTDESCTOP")
            (getenv "VIRTDESCTOP")
          "my-e-server"))
  (server-start)
  ; as I use multipple emacses for different virtual desctops I need to setup a
  ; environment variabel describing which setup I am on
#+END_SRC

* tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
#+END_SRC

** set default protocol
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

** ido fixes
#+BEGIN_SRC emacs-lisp
  (defun ido-remove-tramp-from-cache nil
    "Remove any TRAMP entries from `ido-dir-file-cache'.
      This stops tramp from trying to connect to remote hosts on emacs startup,
      which can be very annoying."
    (interactive)
    (setq ido-dir-file-cache
          (cl-remove-if
           (lambda (x)
             (string-match "/\\(rsh\\|ssh\\|telnet\\|su\\|sudo\\|sshx\\|krlogin\\|ksu\\|rcp\\|scp\\|rsync\\|scpx\\|fcp\\|nc\\|ftp\\|smb\\|adb\\):" (car x)))
           ido-dir-file-cache)))
  ;; redefine `ido-kill-emacs-hook' so that cache is cleaned before being saved
  (defun ido-kill-emacs-hook ()
    (ido-remove-tramp-from-cache)
    (ido-save-history))
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+END_SRC

** use remote PATH
#+BEGIN_SRC emacs-lisp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+END_SRC


* python

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC
* elsip
** turn show patan on in emacs-lisp-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
#+END_SRC
** set it to highlight the hole expression between the parenteses
#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'expression)
  (require 'paren)
  (set-face-background 'show-paren-match "#2E001B")
  ;#810797 "#990045" "#470028"
#+END_SRC
** if you want highlighting when the cursor is inside the parenteses use
   (setq show-paren-when-point-inside-paren t)
*** try to use tangle-no here
** DONE check if you can get this elisp buffer locla
* vc
** follow renames

#+BEGIN_SRC emacs-lisp :tangle no
  (setq vc-git-print-log-follow t)
#+END_SRC

** invoke vc-ediff on "="

#+BEGIN_SRC emacs-lisp
  (eval-after-load "vc-hooks"
    '(define-key vc-prefix-map "=" 'vc-ediff))
#+END_SRC

* ediff
** split vertical

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

** keep in one frame

#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

* org
  org-capture is set to C-c c in the global key bindigs

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (require 'org-agenda)
  (require 'org-capture)
#+END_SRC

** set default directory to put org files

#+BEGIN_SRC emacs-lisp
  (let ((orgdir (concat user-emacs-directory "/org")))
    (setq org-directory orgdir)
    (setq org-agenda-files `(,orgdir)))
#+END_SRC

** org capture templates
*** emacs backlog
    This is a test. so will need rename as there is more then one backlog

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("e" "things to fix in emacs" entry
                 (file+headline "emacs_backlog.org" "backlog")
                   "* TODO %?\n%t"))
#+END_SRC


*** misc backlog
    This is a test. so will need rename as there is more then one backlog

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("m" "things to fix" entry
                 (file+headline "misc_backlog.org" "misc backlog")
                   "* TODO %?\n%t"))
#+END_SRC

*** tips and trix
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("t" "Tips and Trix" entry
                 (file+headline "tips_and_trix.org" "help")
                   "* %?\n%t"))
#+END_SRC

** add languages to be evaluated in SRC block's

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-babel-load-languages '(shell . t))
#+END_SRC

* faker mode
  Hide the fact that I use the arrow keys all the time.
  and its funn to create my own layout

#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/.emacs.d/modes/faker-mode")
    (add-to-list 'load-path "~/.emacs.d/modes/faker-mode")
    (require 'faker-mode))

  (global-set-key (kbd "C-j") 'faker-mode)
#+END_SRC

* change to dwim functions

#+BEGIN_SRC emacs-lisp :tangle no
  (global-set-key (kbd "M-u") 'upcase-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-c") 'capitalized-dwim)
#+END_SRC

* narrow
narrowing is disabled by default in emacs. keep it active
#+BEGIN_SRC emacs-lisp :tangle no
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
